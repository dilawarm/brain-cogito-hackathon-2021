# -*- coding: utf-8 -*-
"""VAR

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OBWkxTLy7CuzeEfLS7dvM-MB3Dw3m3GA
"""

import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt
from statsmodels.tsa.vector_ar.var_model import VAR

from sklearn import preprocessing
from sklearn.decomposition import PCA

import warnings
warnings.simplefilter('ignore')

df = pd.read_csv('hackathon_kpis_anonymised.csv', parse_dates=['timestamp'])

df.head()

df.info()

df = df.sort_values(by="timestamp")
df.fillna(df.median(), inplace=True)
df.set_index("timestamp", inplace=True)

#cell_name = "00_11Z"
#df = df[df.cell_name == cell_name]

df.head()

df.info()

def create_VAR_model(data, cell_name, n_pca):
  # PCA
  data = data[data.cell_name == cell_name]
  data.drop(labels="cell_name", axis=1, inplace=True)

  pca = PCA(n_components=n_pca)
  pca.fit(data)

  columns = [f'pca_{i}' for i in range(n_pca)]
  df_pca = pd.DataFrame(pca.transform(data), columns=columns, index=data.index)

  # Model Selection
  AIC = {}
  best_aic, best_order = np.inf, 0

  for i in range(1, 50):
      model = VAR(endog=df_pca)
      var_result = model.fit(maxlags=i, trend="nc")
      AIC[i] = var_result.aic
      
      if AIC[i] < best_aic:
          best_aic = AIC[i]
          best_order = i

  # Best model
  var = VAR(endog=df_pca)
  var_result = var.fit(maxlags=best_order)

  return var_result, df_pca, best_order

def find_anomalies(data, cell_name, n_pca):
  var_result, df_pca, best_order = create_VAR_model(data, cell_name, n_pca)

  residuals_mean = var_result.resid.values.mean(axis=0)
  residuals_std = var_result.resid.values.std(axis=0)

  residuals = (var_result.resid.values - residuals_mean) / residuals_std
  cov_residuals = np.linalg.inv(np.cov(residuals.T))

  T = np.diag((residuals).dot(cov_residuals).dot(residuals.T))

  m = var_result.nobs
  p = var_result.resid.shape[-1]
  alpha = 0.01

  UCL = stats.f.ppf(1-alpha, dfn=p, dfd=m-p) *(p*(m+1)*(m-1)/(m*m-m*p))

  anomaly_timestamps = []
  for i, t in enumerate(T):
    if t > UCL:
      anomaly_timestamps.append(list(df_pca.index[best_order:])[i])
  
  return anomaly_timestamps